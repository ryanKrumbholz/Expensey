{"ast":null,"code":"var _jsxFileName = \"/Users/ryankrumbholz/OneDrive/development/expensey/expensey-client/client/src/components/table.js\";\nimport React from 'react';\nimport ExpenseCard from './expense_card';\nimport App from '../App';\nimport './table.css';\n\nconst Table = props => {\n  var expenseCardList = []; //list of expenseCard components; gathered in function 'populateExpenseCards'\n\n  var emptyCardLsContent =\n  /*#__PURE__*/\n  //Element that displays when expenseCardList is empty\n  React.createElement(\"div\", {\n    class: \"emptyCardList\",\n    onClick: props.toggleWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, \"Create new expense\"));\n\n  async function fetchListData(expenses) {\n    /**\n     * Fetches filters list data for search drop downs and search boxes.\n     */\n    var expenses = await expenses;\n\n    function fetchCatList(expenses) {\n      /**\n       * Fetches category from each expense and adds them to a list\n       * that is displayed as a dropdown selector.\n       */\n      var catList = listData().getCatList(); //Assigned to current list of categories, which should be empty on start.\n\n      var catMap = new Map(); //Hashmap of categories for checking if the category has already been added to the list. Also allows to maintain better runtime.\n\n      if (expenses) {\n        for (var i = 0; i <= expenses.length; i++) {\n          if (expenses[i]) {\n            var currExpenseCat = expenses[i].category; //current expense category\n\n            if (!catMap.has(currExpenseCat)) {\n              //checking if category is not in the hashmap.\n              catMap.set(currExpenseCat); //add category to hashmap.\n\n              catList.push(currExpenseCat); //add category to list.\n            }\n          }\n        }\n      }\n\n      if (catList.length > props.catList.length && catList[0]) {\n        //prevents infinite re-rendering by checking only changing state when categories are updated\n        props.setCatList(catList);\n      }\n    }\n\n    function fetchCcList(expenses) {\n      /**\n       * Fetches credit card display info from each expense and adds them to a list\n       * that is displayed as a dropdown selector.\n       */\n      var ccList = listData().getCcList(); //Assigned to current list of credit cards, which should be empty on start.\n\n      var ccMap = new Map(); //Hashmap of credit cards for checking if the category has already been added to the list. Also allows to maintain better runtime.\n\n      if (expenses) {\n        for (var i = 0; i <= expenses.length; i++) {\n          if (expenses[i]) {\n            var currExpenseCc = expenses[i].ccData; //current credit card info\n\n            if (!ccMap.has(currExpenseCc)) {\n              //checking if credit card data is not already in the map.\n              ccMap.set(currExpenseCc);\n              ccList.push(currExpenseCc);\n            }\n          }\n        }\n      }\n\n      if (ccList.length > props.ccList && ccList[0]) {\n        //prevents infinite re-rendering by checking only changing state when credit cards are updated\n        props.setCcList(ccList);\n      }\n    }\n\n    function fetchTagList(expenses) {\n      /**\n       * Fetches tags list from each expense and adds them to a list\n       * that is displayed as a dropdown selector.\n       */\n      function removeDups(ls) {\n        /**\n        * Removes duplicate items in list.\n        */\n        var seenTags = new Map(); //Hashmap of seen list items\n\n        for (var i = 0; i < ls.length; i++) {\n          var currTag = ls[i]; //current tag in tagList\n\n          if (!seenTags.has(currTag)) {\n            //if item is not dupe, add to seenTags\n            seenTags.set(currTag);\n          } else {\n            //removes item from tagList if  dupe\n            ls.splice(i, 1);\n          }\n        }\n      }\n\n      var tagList = listData().getTagList(); //Assigned to current list of credit cards, which should be empty on start.\n\n      if (expenses) {\n        for (var i = 0; i <= expenses.length; i++) {\n          if (expenses[i]) {\n            var currExpenseTags = expenses[i].tags; //current list of tags\n\n            if (tagList.length === 0) {\n              //if tag list is empty, assign it to the current tag list\n              tagList = currExpenseTags;\n            } else {\n              tagList = tagList.concat(currExpenseTags);\n            }\n          }\n        }\n\n        for (var i = 0; i <= tagList.length; i++) {\n          removeDups(tagList);\n        }\n      }\n\n      if (tagList.length > props.tagList && tagList[0]) {\n        //prevents infinite re-rendering\n        props.setTagList(tagList);\n      }\n    }\n\n    function fetchAllList(expenses) {\n      /**\n       * Calls all fetch functions\n       */\n      fetchCatList(expenses);\n      fetchCcList(expenses);\n      fetchTagList(expenses);\n    }\n\n    fetchAllList(expenses);\n  }\n\n  function listData() {\n    /**\n     * Encapsulates table filters lists\n     */\n    var tagList = [];\n    var categoriesList = [];\n    var ccList = [];\n    return {\n      setTagList: function (newTagList) {\n        tagList = newTagList;\n      },\n      setCatList: function (newCatList) {\n        categoriesList = newCatList;\n      },\n      setCcList: function (newCcList) {\n        ccList = newCcList;\n      },\n      getCatList: function () {\n        return categoriesList;\n      },\n      getCcList: function () {\n        return ccList;\n      },\n      getTagList: function () {\n        return tagList;\n      }\n    };\n  }\n\n  var populateSelectList = ls => {\n    /**\n     * Populate selector dropdown list with given array.\n     */\n    var selectLs = []; //init empty array of option elements to be returned with items from the array\n\n    for (var i = 0; i < ls.length; i++) {\n      selectLs.push( /*#__PURE__*/React.createElement(\"option\", {\n        class: \"selectli\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }\n      }, ls[i]));\n    }\n\n    return selectLs;\n  };\n\n  var sortByCat = async () => {\n    /**\n     * Sorts by user selected category.\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with given category to cardLs.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].category === currCat) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n      }\n    }\n\n    var select = document.getElementsByClassName('catList')[0]; //gets list of dropdown options.\n\n    var currCat; //To be assigned to currently selected category\n\n    var sortedExpenses = []; //list of expenses with given category. Gets pushed to in helper function.\n\n    if (select.options) {\n      currCat = select.options[select.selectedIndex].text; //assigned to user selected category\n    }\n\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n\n    helper();\n\n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current category to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper();\n    }\n\n    expenseCardList = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    if (currCat === 'Select Category') {\n      //resets back to full list of expenses when default option selected\n      populateExpenseCards(expenses);\n    } else {\n      //populates expenses with given category\n      populateExpenseCards(sortedExpenses);\n    }\n\n    props.setExpenses(sortedExpenses); //changes state of current expenses\n  };\n\n  var sortByCC = async () => {\n    /**\n     * Sorts by the user selected credit card\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with matching CC info to cardLs.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].ccData === currCC) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n      }\n    }\n\n    var select = document.getElementsByClassName('ccList')[0]; //gets list of dropdown options.\n\n    var currCC; //To be assigned to currently selected CC info\n\n    var sortedExpenses = []; //list of expenses with given CC info. Gets pushed to in helper function.\n\n    if (select.options) {\n      currCC = select.options[select.selectedIndex].text;\n    }\n\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n\n    helper();\n\n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current CC info to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper();\n    }\n\n    expenseCardList = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    if (currCC === 'Select Category') {\n      //resets back to full list of expenses when default option selected\n      populateExpenseCards(expenses);\n    } else {\n      //populates expenses with given CC info\n      populateExpenseCards(sortedExpenses);\n    }\n\n    props.setExpenses(sortedExpenses); //changes state of current expenses\n  };\n\n  var sortByTag = async () => {\n    /**\n     * Sorts by the user selected tag.\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with matching tag to cardLs.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].tags.includes(currTag)) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n      }\n    }\n\n    var select = document.getElementsByClassName('tagList')[0]; //gets list of dropdown options.\n\n    var currTag; //To be assigned to currently tag.\n\n    var sortedExpenses = []; //list of expenses with given Tag. Gets pushed to in helper function.\n\n    if (select.options) {\n      currTag = select.options[select.selectedIndex].text;\n    }\n\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n\n    helper();\n\n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current tag to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper();\n    }\n\n    expenseCardList = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    if (currTag === 'Select Tag') {\n      //resets back to full list of expenses when default option selected\n      populateExpenseCards(expenses);\n    } else {\n      populateExpenseCards(sortedExpenses);\n    }\n\n    props.setExpenses(sortedExpenses); //changes state of current expenses\n  };\n\n  var sortByMerch = async () => {\n    /**\n     * Sorts by the user selected merchant.\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with matching merchant to cardLs.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].merchant.toUpperCase() === input.toUpperCase()) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n      }\n    }\n\n    var input = document.getElementsByClassName('merchIn')[0].value; //gets value typed by user.\n\n    var sortedExpenses = []; //list of expenses with given Merchant. Gets pushed to in helper function.\n\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n\n    helper();\n\n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current merchant to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper();\n    }\n\n    expenseCardList = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    if (input === '') {\n      //resets back to full list of expenses when default option selected\n      populateExpenseCards(expenses);\n    } else {\n      //populates expenses with given merchant\n      populateExpenseCards(sortedExpenses);\n    }\n\n    props.setExpenses(sortedExpenses); //changes state of current expenses\n  };\n\n  var sortByDate = async () => {\n    /**\n     * Sorts by the user selected date range\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with dates in between upper and lower bounds.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].dateNum >= lowerBound || expensesLocal[i].dateNum <= upperBound) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n      }\n    }\n\n    var lowerBound = document.getElementsByClassName('dateFrom')[0].valueAsNumber; //number value of 'from' date\n\n    var upperBound = document.getElementsByClassName('dateTo')[0].valueAsNumber; //number value of 'to' date\n\n    var sortedExpenses = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n\n    helper();\n\n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current date range to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper();\n    }\n\n    populateExpenseCards(sortedExpenses); //populates expenses between date range\n\n    props.setExpenses(sortedExpenses); //changes state of current expenses\n  };\n\n  var sortByStatus = async () => {\n    //TODO need to finish props function\n\n    /**\n     * Sorts by the user selected statuses\n     */\n    function helper() {\n      /**\n       * Checks each of checkboxes. If a checkbox is checked and expense status matches checkbox status the expense gets pushed to list.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].status === unreported && props.c1 === true) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n\n        if (expensesLocal[i].status === 'open' && props.c2 === true) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n\n        if (expensesLocal[i].status === processing && props.c3 === true) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n\n        if (expensesLocal[i].status === approved && props.c4 === true) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n\n        if (expensesLocal[i].status === reimbursed && props.c5 === true) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n\n        if (expensesLocal[i].status === closed && props.c6 === true) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n\n        if (expensesLocal[i].status === deleted && props.c7 === true) {\n          sortedExpenses.push(expensesLocal[i]);\n        }\n      }\n    }\n\n    var sortedExpenses = []; //To be populated later by helper method; List of expenses sorted by status\n\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n\n    var unreported = document.getElementsByClassName('c1')[0].text; //String \"unreported\"\n\n    var open = document.getElementsByClassName('c2')[0].text; //String \"open\"\n\n    var processing = document.getElementsByClassName('c3')[0].text; //String \"processing\"\n\n    var approved = document.getElementsByClassName('c4')[0].text; //String \"approved\"\n\n    var reimbursed = document.getElementsByClassName('c5')[0].text; //String \"reimbursed\"\n\n    var closed = document.getElementsByClassName('c6')[0].text; //String \"closed\"\n\n    var deleted = document.getElementsByClassName('c7')[0].text; //String \"deleted\"\n\n    helper();\n\n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current checked statuses to another by re-assigning back to all expenses\n      // and reruns helper method.\n      expensesLocal = await expenses;\n      helper();\n    }\n\n    populateExpenseCards(sortedExpenses); //populates expenses with checked statuses\n\n    props.setExpenses(sortedExpenses); //changes state of current expenses\n  };\n\n  var getCookie = cname => {\n    /**\n     * Gets data of local cookie of given cname\n     */\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1);\n      }\n\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n\n    return \"\";\n  };\n\n  async function fetchExpenses() {\n    /**\n     * Fetches expenses of given user from API.\n     */\n    var userEmail = getCookie(\"email\");\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: userEmail\n      })\n    };\n    var data = await fetch('https://api.expensey.app/users/expenses', requestOptions).then(res => res.json()).then(data => {\n      return data;\n    }).catch(error => console.log(error));\n    return data;\n  }\n\n  async function populateExpenseCards(expenses) {\n    /**\n       * Populates expenseCardList with expense card components with given expenses.\n       */\n    var expenses = await expenses; //expenses from API\n\n    if (expenses) {\n      var numCards = expenses.length;\n\n      for (var i = 0; i < numCards; i++) {\n        var arr = expenses[i].date.split('-');\n        var date = arr[1] + '-' + arr[2] + '-' + arr[0]; //string with rearranged date into dd-mm-yyyy format\n\n        expenseCardList.push( /*#__PURE__*/React.createElement(ExpenseCard, {\n          data: [date, expenses[i].merchant, expenses[i].amount, expenses[i].category, expenses[i].description, expenses[i].tag, expenses[i].receiptImgLink, expenses[i].status],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 28\n          }\n        }));\n      }\n    }\n\n    if (expenseCardList != props.currCardLs) {\n      //if statement prevents infinite re-rendering by only changing state when expenses update\n      props.setCardLs(expenseCardList);\n    }\n  }\n\n  var expenses = fetchExpenses();\n\n  if (props.expenses.length === 0) {\n    //changes expenses state if empty\n    props.setExpenses(expenses);\n  }\n\n  if (props.currCardLs.length === 0) {\n    //if expense cards are empty populate expenseCards\n    populateExpenseCards(expenses);\n  }\n\n  function filters() {\n    //Filters element\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"datesFiltersList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      action: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"From\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }\n    }, \"From: \"), /*#__PURE__*/React.createElement(\"input\", {\n      class: \"dateFrom\",\n      type: \"date\",\n      id: \"\",\n      name: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      action: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"To\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 17\n      }\n    }, \"To: \"), /*#__PURE__*/React.createElement(\"input\", {\n      class: \"dateTo\",\n      type: \"date\",\n      id: \"\",\n      name: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"submit\",\n      onClick: sortByDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"typeFiltersList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"merchIn\",\n      type: \"text\",\n      placeholder: \"Merchant\",\n      onChange: \"\",\n      onSubmit: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"submit\",\n      onClick: sortByMerch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 19\n      }\n    })))), /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"categoryTagList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      class: \"catList\",\n      onChange: sortByCat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 15\n      }\n    }, \"Select Category\"), populateSelectList(props.catList))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      class: \"ccList\",\n      onChange: sortByCC,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 15\n      }\n    }, \"Select Card\"), populateSelectList(props.ccList))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      class: \"tagList\",\n      onChange: sortByTag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 15\n      }\n    }, \"Select Tag\"), populateSelectList(props.tagList)))), /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"statusList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"c1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: props.c1,\n      onClick: (props.togglec1, sortByStatus),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 19\n      }\n    }), \"Unreported\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"c2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: props.c2,\n      onClick: props.togglec2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 17\n      }\n    }), \"Open\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"c3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: props.c3,\n      onClick: props.togglec3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 17\n      }\n    }), \"Processing\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"c4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: props.c4,\n      onClick: props.togglec4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 17\n      }\n    }), \"Approved\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"c5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: props.c5,\n      onClick: props.togglec5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 17\n      }\n    }), \"Reimbursed\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"c6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: props.c6,\n      onClick: props.togglec6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 17\n      }\n    }), \"Closed\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      class: \"c7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: props.c7,\n      onClick: props.togglec7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 17\n      }\n    }), \"Deleted\"))));\n  }\n\n  function table() {\n    // Table element\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"theader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      class: \"dateli\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 11\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"statusli\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 11\n      }\n    }, \"Status\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"merchli\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 11\n      }\n    }, \"Merchant\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"amountli\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 11\n      }\n    }, \"Amount\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"catli\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 11\n      }\n    }, \"Category\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"descli\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 11\n      }\n    }, \"Description\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"tbody\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 9\n      }\n    }, props.currCardLs != 0 ? props.currCardLs : emptyCardLsContent));\n  }\n\n  fetchListData(expenses);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 5\n    }\n  }, filters(), table());\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/ryankrumbholz/OneDrive/development/expensey/expensey-client/client/src/components/table.js"],"names":["React","ExpenseCard","App","Table","props","expenseCardList","emptyCardLsContent","toggleWindow","fetchListData","expenses","fetchCatList","catList","listData","getCatList","catMap","Map","i","length","currExpenseCat","category","has","set","push","setCatList","fetchCcList","ccList","getCcList","ccMap","currExpenseCc","ccData","setCcList","fetchTagList","removeDups","ls","seenTags","currTag","splice","tagList","getTagList","currExpenseTags","tags","concat","setTagList","fetchAllList","categoriesList","newTagList","newCatList","newCcList","populateSelectList","selectLs","sortByCat","helper","expensesLocal","currCat","sortedExpenses","select","document","getElementsByClassName","options","selectedIndex","text","populateExpenseCards","setExpenses","sortByCC","currCC","sortByTag","includes","sortByMerch","merchant","toUpperCase","input","value","sortByDate","dateNum","lowerBound","upperBound","valueAsNumber","sortByStatus","status","unreported","c1","c2","processing","c3","approved","c4","reimbursed","c5","closed","c6","deleted","c7","open","getCookie","cname","name","decodedCookie","decodeURIComponent","cookie","ca","split","c","charAt","substring","indexOf","fetchExpenses","userEmail","requestOptions","method","headers","body","JSON","stringify","email","data","fetch","then","res","json","catch","error","console","log","numCards","arr","date","amount","description","tag","receiptImgLink","currCardLs","setCardLs","filters","togglec1","togglec2","togglec3","togglec4","togglec5","togglec6","togglec7","table"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ExpenseCard  from './expense_card';\nimport App from '../App';\nimport './table.css';\n\nconst Table = props => {\n  var expenseCardList =  []; //list of expenseCard components; gathered in function 'populateExpenseCards'\n  var emptyCardLsContent = //Element that displays when expenseCardList is empty\n  <div class=\"emptyCardList\" onClick={props.toggleWindow}>\n    <h3>Create new expense</h3>\n  </div>\n\n  async function fetchListData(expenses) {\n    /**\n     * Fetches filters list data for search drop downs and search boxes.\n     */\n    var expenses = await expenses;\n\n    function fetchCatList(expenses) {\n      /**\n       * Fetches category from each expense and adds them to a list\n       * that is displayed as a dropdown selector.\n       */\n      var catList = listData().getCatList(); //Assigned to current list of categories, which should be empty on start.\n      var catMap = new Map(); //Hashmap of categories for checking if the category has already been added to the list. Also allows to maintain better runtime.\n      if (expenses) {\n        for (var i = 0; i <= expenses.length; i++) {\n          if (expenses[i]){\n            var currExpenseCat = expenses[i].category; //current expense category\n            if (!catMap.has(currExpenseCat)){ \n              //checking if category is not in the hashmap.\n              catMap.set(currExpenseCat); //add category to hashmap.\n              catList.push(currExpenseCat); //add category to list.\n            }\n          }\n        }\n      }\n      if (catList.length > props.catList.length && catList[0]) {\n        //prevents infinite re-rendering by checking only changing state when categories are updated\n      props.setCatList(catList)\n      }\n    }\n\n    function fetchCcList(expenses) {\n      /**\n       * Fetches credit card display info from each expense and adds them to a list\n       * that is displayed as a dropdown selector.\n       */\n      var ccList = listData().getCcList(); //Assigned to current list of credit cards, which should be empty on start.\n      var ccMap = new Map(); //Hashmap of credit cards for checking if the category has already been added to the list. Also allows to maintain better runtime.\n      if (expenses) {\n        for (var i = 0; i <= expenses.length; i++) {\n          if (expenses[i]){\n            var currExpenseCc = expenses[i].ccData; //current credit card info\n            if (!ccMap.has(currExpenseCc)) {\n              //checking if credit card data is not already in the map.\n              ccMap.set(currExpenseCc);\n              ccList.push(currExpenseCc);\n            }\n          }\n        }\n      }\n      if (ccList.length > props.ccList && ccList[0]){\n        //prevents infinite re-rendering by checking only changing state when credit cards are updated\n      props.setCcList(ccList)\n    }\n    }\n\n    function fetchTagList(expenses) {\n      /**\n       * Fetches tags list from each expense and adds them to a list\n       * that is displayed as a dropdown selector.\n       */\n      function removeDups(ls) {\n         /**\n       * Removes duplicate items in list.\n       */\n      var seenTags = new Map(); //Hashmap of seen list items\n      for (var i = 0; i < ls.length; i++){\n        var currTag = ls[i]; //current tag in tagList\n        if (!seenTags.has(currTag)){\n          //if item is not dupe, add to seenTags\n          seenTags.set(currTag)\n        }\n        else {\n          //removes item from tagList if  dupe\n          ls.splice(i,1)\n        }\n      }\n      }\n      var tagList = listData().getTagList(); //Assigned to current list of credit cards, which should be empty on start.\n      if (expenses) {\n      for (var i = 0; i <= expenses.length; i++) {\n        if (expenses[i]){\n          var currExpenseTags = expenses[i].tags; //current list of tags\n            if (tagList.length === 0){\n              //if tag list is empty, assign it to the current tag list\n              tagList = currExpenseTags\n            }\n            else{\n              tagList = tagList.concat(currExpenseTags);\n            }\n\n        }\n      }\n      for (var i = 0; i <= tagList.length; i++) {\n        removeDups(tagList);\n      }\n    }\n    if (tagList.length > props.tagList && tagList[0]){\n      //prevents infinite re-rendering\n      props.setTagList(tagList)\n    }\n  }\n    function fetchAllList(expenses) {\n      /**\n       * Calls all fetch functions\n       */\n      fetchCatList(expenses); \n      fetchCcList(expenses); \n      fetchTagList(expenses);\n    }\n    fetchAllList(expenses);\n  }\n\n  function listData (){\n    /**\n     * Encapsulates table filters lists\n     */\n    var tagList = [];\n    var categoriesList = [];\n    var ccList = [];\n\n    return {\n      setTagList : function (newTagList) {\n        tagList = newTagList;\n      },\n      setCatList : function (newCatList) {\n        categoriesList = newCatList;\n      },\n      setCcList : function (newCcList) {\n        ccList = newCcList;\n      },\n      getCatList : function () {\n        return categoriesList;\n      },\n      getCcList : function () {\n        return  ccList;\n      },\n      getTagList : function () {\n        return tagList;\n      }\n    };\n  }\n\n  var populateSelectList = (ls) => {\n    /**\n     * Populate selector dropdown list with given array.\n     */\n    var selectLs = []; //init empty array of option elements to be returned with items from the array\n    for(var i = 0; i < ls.length; i++) {\n      selectLs.push(<option  class=\"selectli\">{ls[i]}</option>)\n    }\n    return selectLs;\n  }\n\n  var sortByCat = async () => {\n    /**\n     * Sorts by user selected category.\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with given category to cardLs.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].category === currCat) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n      }\n    }\n\n    var select = document.getElementsByClassName('catList')[0] //gets list of dropdown options.\n    var currCat; //To be assigned to currently selected category\n    var sortedExpenses = []; //list of expenses with given category. Gets pushed to in helper function.\n    if (select.options) {\n      currCat = select.options[select.selectedIndex].text //assigned to user selected category\n    }\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n\n    helper()\n    \n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current category to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper()\n    }\n    expenseCardList = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    if (currCat === 'Select Category'){\n      //resets back to full list of expenses when default option selected\n      populateExpenseCards(expenses)\n    }\n    else{\n      //populates expenses with given category\n      populateExpenseCards(sortedExpenses)\n    }\n    props.setExpenses(sortedExpenses) //changes state of current expenses\n  }\n\n  var sortByCC = async () => {\n    /**\n     * Sorts by the user selected credit card\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with matching CC info to cardLs.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].ccData === currCC) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n      }\n    }\n\n    var select = document.getElementsByClassName('ccList')[0]; //gets list of dropdown options.\n    var currCC; //To be assigned to currently selected CC info\n    var sortedExpenses = []; //list of expenses with given CC info. Gets pushed to in helper function.\n      if (select.options) {\n        currCC = select.options[select.selectedIndex].text\n      }\n\n      var expensesLocal = await props.expenses; //gets list of expenses from state\n    \n      helper()\n    \n      if (sortedExpenses.length === 0) {\n        //Allows for changing the current CC info to another by re-assigning back to all expenses\n      // and reruns helper method. \n        expensesLocal = await expenses;\n        helper()\n      }\n\n    expenseCardList = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    if (currCC === 'Select Category'){\n      //resets back to full list of expenses when default option selected\n      populateExpenseCards(expenses)\n    }\n    else{\n      //populates expenses with given CC info\n      populateExpenseCards(sortedExpenses)\n    }\n    props.setExpenses(sortedExpenses) //changes state of current expenses\n  }\n\n  var sortByTag = async () => {\n    /**\n     * Sorts by the user selected tag.\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with matching tag to cardLs.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].tags.includes(currTag)) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n      }\n    }\n    var select = document.getElementsByClassName('tagList')[0]  //gets list of dropdown options.\n    var currTag; //To be assigned to currently tag.\n    var sortedExpenses = []; //list of expenses with given Tag. Gets pushed to in helper function.\n    if (select.options) {\n      currTag = select.options[select.selectedIndex].text\n    }\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n    \n    helper()\n    \n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current tag to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper()\n    }\n    \n    expenseCardList = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    if (currTag === 'Select Tag'){\n      //resets back to full list of expenses when default option selected\n      populateExpenseCards(expenses)\n    }\n    else{\n      \n      populateExpenseCards(sortedExpenses)\n    }\n    props.setExpenses(sortedExpenses) //changes state of current expenses\n  }\n\n  var sortByMerch = async () => {\n    /**\n     * Sorts by the user selected merchant.\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with matching merchant to cardLs.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].merchant.toUpperCase() === input.toUpperCase()) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n      }\n    }\n    var input = document.getElementsByClassName('merchIn')[0].value  //gets value typed by user.\n    var sortedExpenses = []; //list of expenses with given Merchant. Gets pushed to in helper function.\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n    \n    helper()\n    \n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current merchant to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper()\n    }\n\n    expenseCardList = []; //List of soon to be expense cards which get pushed to in following lines of code.\n\n    if (input === ''){\n      //resets back to full list of expenses when default option selected\n      populateExpenseCards(expenses)\n    }\n    else{\n      //populates expenses with given merchant\n      populateExpenseCards(sortedExpenses)\n    }\n    props.setExpenses(sortedExpenses) //changes state of current expenses\n  }\n\n  var sortByDate = async () => {\n    /**\n     * Sorts by the user selected date range\n     */\n    function helper() {\n      /**\n       * Sorts through expenses and pushes expense with dates in between upper and lower bounds.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if (expensesLocal[i].dateNum >= lowerBound || expensesLocal[i].dateNum <= upperBound) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n      }\n    }\n    var lowerBound = document.getElementsByClassName('dateFrom')[0].valueAsNumber //number value of 'from' date\n    var upperBound = document.getElementsByClassName('dateTo')[0].valueAsNumber//number value of 'to' date\n    var sortedExpenses = []; //List of soon to be expense cards which get pushed to in following lines of code.\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n\n    helper()\n\n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current date range to another by re-assigning back to all expenses\n      // and reruns helper method. \n      expensesLocal = await expenses;\n      helper()\n    }\n\n    populateExpenseCards(sortedExpenses) //populates expenses between date range\n    props.setExpenses(sortedExpenses) //changes state of current expenses\n\n  }\n\n  var sortByStatus = async () => { //TODO need to finish props function\n    /**\n     * Sorts by the user selected statuses\n     */\n    function helper() {\n      /**\n       * Checks each of checkboxes. If a checkbox is checked and expense status matches checkbox status the expense gets pushed to list.\n       */\n      for (var i = 0; i < expensesLocal.length; i++) {\n        if(expensesLocal[i].status === unreported && props.c1 === true) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n        if(expensesLocal[i].status === 'open' && props.c2 === true) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n        if(expensesLocal[i].status === processing && props.c3 === true) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n        if(expensesLocal[i].status === approved && props.c4 === true) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n        if(expensesLocal[i].status === reimbursed && props.c5 === true) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n        if(expensesLocal[i].status === closed && props.c6 === true) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n        if(expensesLocal[i].status === deleted && props.c7 === true) {\n          sortedExpenses.push(expensesLocal[i])\n        }\n      }\n    }\n\n    var sortedExpenses = [];  //To be populated later by helper method; List of expenses sorted by status\n    var expensesLocal = await props.expenses; //gets list of expenses from state\n    var unreported = document.getElementsByClassName('c1')[0].text //String \"unreported\"\n    var open = document.getElementsByClassName('c2')[0].text //String \"open\"\n    var processing = document.getElementsByClassName('c3')[0].text //String \"processing\"\n    var approved = document.getElementsByClassName('c4')[0].text //String \"approved\"\n    var reimbursed = document.getElementsByClassName('c5')[0].text //String \"reimbursed\"\n    var closed = document.getElementsByClassName('c6')[0].text //String \"closed\"\n    var deleted = document.getElementsByClassName('c7')[0].text //String \"deleted\"\n\n    helper()\n\n    if (sortedExpenses.length === 0) {\n      //Allows for changing the current checked statuses to another by re-assigning back to all expenses\n      // and reruns helper method.\n      expensesLocal = await expenses;\n      helper()\n    }\n    populateExpenseCards(sortedExpenses) //populates expenses with checked statuses\n    props.setExpenses(sortedExpenses)  //changes state of current expenses\n  }\n\n  var getCookie = cname => {\n    /**\n     * Gets data of local cookie of given cname\n     */\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return \"\";\n  }\n\n  async function fetchExpenses() {\n    /**\n     * Fetches expenses of given user from API.\n     */\n    var userEmail = getCookie(\"email\");\n    const requestOptions =\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email : userEmail\n      })};\n\n      var data = await fetch('https://api.expensey.app/users/expenses',requestOptions) \n          .then(res => res.json())\n          .then (data => \n            {\n              return data\n            })\n          .catch(error => console.log(error));\n\n      return data\n      }\n\nasync function populateExpenseCards (expenses) {\n  /**\n     * Populates expenseCardList with expense card components with given expenses.\n     */\n  var expenses = await expenses; //expenses from API\n  if (expenses) {\n    var numCards = expenses.length;\n    for (var i = 0; i < numCards; i++) {\n      var arr = expenses[i].date.split('-')\n      var date = arr[1] + '-' + arr[2] + '-' + arr[0] //string with rearranged date into dd-mm-yyyy format\n      expenseCardList.push(<ExpenseCard data = {[date, expenses[i].merchant, expenses[i].amount,\n       expenses[i].category,expenses[i].description, expenses[i].tag, expenses[i].receiptImgLink, expenses[i].status]}/>)\n    }\n  }\n  if (expenseCardList != props.currCardLs){\n    //if statement prevents infinite re-rendering by only changing state when expenses update\n    props.setCardLs(expenseCardList);\n  }\n  }\n\n  var expenses = fetchExpenses();\n  \n  if (props.expenses.length === 0) {\n    //changes expenses state if empty\n    props.setExpenses(expenses);\n  }\n\n  if (props.currCardLs.length === 0) {\n    //if expense cards are empty populate expenseCards\n    populateExpenseCards(expenses);\n  }\n\n  function filters () {\n    //Filters element\n    return(\n          <div className=\"filters\">\n            <ul class=\"datesFiltersList\">\n            <li>\n              <form action=\"\">\n                <label for=\"From\">From: </label>\n                <input class=\"dateFrom\" type=\"date\" id=\"\" name=\"\"/>\n              </form>\n            </li>\n            <li>\n              <form action=\"\">\n                <label for=\"To\">To: </label>\n                <input class=\"dateTo\" type=\"date\" id=\"\" name=\"\"/>\n              </form>\n              <button class=\"submit\" onClick={sortByDate}></button>\n            </li>\n          </ul>\n          <ul class=\"typeFiltersList\">\n            <li>\n                <label>\n                  <input class=\"merchIn\" type=\"text\" placeholder=\"Merchant\" onChange=\"\" onSubmit=\"\" />\n                  <button class=\"submit\" onClick={sortByMerch}></button>\n                </label>\n          </li>\n          </ul>\n          <ul class=\"categoryTagList\">\n            <li>\n              <select class=\"catList\" onChange={sortByCat}>\n              <option value=\"\" selected>Select Category</option>\n                {populateSelectList(props.catList)}\n              </select>\n            </li>\n            <li>\n              <select class=\"ccList\" onChange={sortByCC}>\n              <option value=\"\" selected>Select Card</option>\n              {populateSelectList(props.ccList)}\n              </select>\n            </li>\n            <li>\n              <select class=\"tagList\" onChange={sortByTag}>\n              <option value=\"\" selected>Select Tag</option>\n              {populateSelectList(props.tagList)}\n              </select>\n            </li>\n          </ul>\n          <ul class=\"statusList\">\n            <li>\n                <label class=\"c1\">\n                  <input type=\"checkbox\" checked={props.c1} onClick={props.togglec1, sortByStatus}/>\n                  Unreported\n                </label>\n            </li>\n            <li>\n              <label class=\"c2\">\n                <input type=\"checkbox\" checked={props.c2} onClick={props.togglec2}/>\n                Open\n              </label>\n            </li>\n            <li>\n              <label class=\"c3\">\n                <input type=\"checkbox\" checked={props.c3} onClick={props.togglec3}/>\n                Processing\n              </label>\n            </li>\n            <li>\n              <label class=\"c4\">\n                <input type=\"checkbox\" checked={props.c4} onClick={props.togglec4}/>\n                Approved\n              </label>\n            </li>\n            <li>\n              <label class=\"c5\">\n                <input type=\"checkbox\" checked={props.c5} onClick={props.togglec5}/>\n                Reimbursed\n              </label>\n            </li>\n            <li>\n              <label class=\"c6\">\n                <input type=\"checkbox\" checked={props.c6} onClick={props.togglec6}/>\n                Closed\n              </label>\n            </li>\n            <li>\n              <label class=\"c7\">\n                <input type=\"checkbox\" checked={props.c7} onClick={props.togglec7}/>\n                Deleted\n              </label>\n            </li> \n          </ul>\n        </div>\n    )\n  }\n\n  function table (){\n    // Table element\n    return(\n      <div class=\"table\">\n        <ul class=\"theader\">\n          <li class=\"dateli\">Date</li>\n          <li class=\"statusli\">Status</li>\n          <li class=\"merchli\">Merchant</li>\n          <li class=\"amountli\">Amount</li>\n          <li class=\"catli\">Category</li>\n          <li class=\"descli\">Description</li>\n        </ul>\n        <div class=\"tbody\">\n        {(props.currCardLs != 0) ? props.currCardLs : emptyCardLsContent }\n        </div>\n      </div>\n    );\n  }\n\n  fetchListData(expenses);\n\n  return (\n    <div>\n      {filters()}\n      {table()}\n    </div>\n  )\n}\n\nexport default Table;"]},"metadata":{},"sourceType":"module"}