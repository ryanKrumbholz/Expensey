{"ast":null,"code":"var _jsxFileName = \"/Users/ryankrumbholz/OneDrive/development/expensey/expensey-client/client/src/components/settings_body.js\";\nimport React, { Component } from 'react';\nimport './settings_body.css';\n\nconst settings_body = props => {\n  var checked = false;\n\n  var getCookie = cname => {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n\n      while (c.charAt(0) == ' ') {\n        c = c.substring(1);\n      }\n\n      if (c.indexOf(name) == 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n\n    return \"\";\n  };\n\n  var dkModeStatus = getCookie('dkModeStatus');\n\n  var checkDkMode = () => {\n    if (dkModeStatus == 'true') {\n      checked = true;\n      props.toggledkmode();\n    }\n  };\n\n  var toggleDarkMode = () => {\n    props.toggledkmode();\n\n    if (dkModeStatus == 'true') {\n      dkModeStatus = 'false';\n    } else {\n      dkModeStatus = 'true';\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: getCookie('email'),\n        dkModeStatus: dkModeStatus\n      })\n    };\n    fetch('https://api.expensey.app/users/user/dkmode', requestOptions).then(res => res.json()).then(data => {\n      console.log(\"Dark mode stauts updated\");\n    }).catch(error => console.log(error));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"settings_body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, checkDkMode(), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"settings_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Settings\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"interface_settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Interface\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"dkmode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Dark Mode\"), /*#__PURE__*/React.createElement(\"label\", {\n    class: \"switch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    onClick: toggleDarkMode,\n    checked: props.dkModeStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"slider round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  })))));\n};\n\nexport default settings_body;","map":{"version":3,"sources":["/Users/ryankrumbholz/OneDrive/development/expensey/expensey-client/client/src/components/settings_body.js"],"names":["React","Component","settings_body","props","checked","getCookie","cname","name","decodedCookie","decodeURIComponent","document","cookie","ca","split","i","length","c","charAt","substring","indexOf","dkModeStatus","checkDkMode","toggledkmode","toggleDarkMode","requestOptions","method","headers","body","JSON","stringify","email","fetch","then","res","json","data","console","log","catch","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './settings_body.css';\n\nconst settings_body = props => {\n\n  var checked = false;\n\n  var getCookie = cname => {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) == ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) == 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return \"\";\n  }\n\n  var dkModeStatus = getCookie('dkModeStatus');\n\n  var checkDkMode = () => {\n    if (dkModeStatus == 'true') {\n      checked = true;\n      props.toggledkmode();\n    }\n  }\n\n\n    var toggleDarkMode = () => {\n      props.toggledkmode();\n\n      if (dkModeStatus == 'true') {\n        dkModeStatus = 'false';\n      }\n      else {\n        dkModeStatus = 'true';\n      }\n      const requestOptions =\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email : getCookie('email'),\n            dkModeStatus : dkModeStatus\n            })};\n          \n          fetch('https://api.expensey.app/users/user/dkmode',requestOptions) \n              .then(res => res.json())\n              .then (data => \n                {\n                  console.log(\"Dark mode stauts updated\");\n                })\n              .catch(error => console.log(error));\n\n    }\n\n  return (\n      <div class=\"settings_body\">\n      {checkDkMode()}\n      <div class=\"settings_header\">\n      <h2>Settings</h2>\n      </div>\n      <div class=\"interface_settings\">\n      <h3>Interface</h3>\n        <div class=\"dkmode\">\n            <p>Dark Mode</p>\n                <label class=\"switch\">\n                <input type=\"checkbox\" onClick={toggleDarkMode} checked={props.dkModeStatus}/>\n                <span class=\"slider round\"></span>\n                </label>\n        </div>\n        </div>\n      </div>\n  )\n}\n\nexport default settings_body;"]},"metadata":{},"sourceType":"module"}